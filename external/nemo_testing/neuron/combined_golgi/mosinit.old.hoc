input_freq = 0 // Must be first line of file for automatic replacement in iPython notebook function to work

objref SpikeTrain, netcon, nil
objref exc[78], inh[27], synapses
objref RT_Vm, EL_Vm

RT_Vm = new Vector()
EL_Vm = new Vector()
create soma
soma {
    nseg = 1
    diam = 27 // 22 pF Dieudonne98
    L = 27
    Ra = 100 // From Roth&Hausser2000
    celsius = 23

    insert Golgi_DeSouza10_ca
    insert Golgi_DeSouza10_ca2
    insert Golgi_DeSouza10_CaHVA
    insert Golgi_DeSouza10_CaLVA
    insert Golgi_DeSouza10_HCN1
    insert Golgi_DeSouza10_HCN2
    insert Golgi_DeSouza10_KA
    insert Golgi_DeSouza10_KCa
    insert Golgi_DeSouza10_KM
    insert Golgi_DeSouza10_KV
    insert Golgi_DeSouza10_Lkg
    insert Golgi_DeSouza10_Na
    insert Golgi_DeSouza10_NaP
    insert Golgi_DeSouza10_NaR
    insert Golgi_DeSouza10_SK2
    insert Golgi_DeSouza10_k
    insert Golgi_DeSouza10_na
    
    usetable_Golgi_DeSouza10_CaLVA = 0
    usetable_Golgi_DeSouza10_CaHVA = 0
    usetable_Golgi_DeSouza10_KA = 0
    usetable_Golgi_DeSouza10_KV = 0
    usetable_Golgi_DeSouza10_NaR = 0
    usetable_Golgi_DeSouza10_KM = 0
    usetable_Golgi_DeSouza10_Na = 0
    usetable_Golgi_DeSouza10_NaP = 0
    
    ena=87.39
    ek=-84.69
      
    SpikeTrain = new Vector()
    netcon = new NetCon(&v(0.5),nil)
    netcon.threshold=-20
    netcon.record(SpikeTrain)
    
    RT_Vm.record(&v(0.5))
    psection()
}
    
create dend[3]
for i=0,2 {
    dend[i] {
        celsius = 23
        nseg = 10
        diam = 3
        L = 113
        Ra = 100
        celsius = 23
        
        insert Golgi_DeSouza10_Lkg
        for k=0, 25 {
            exc[(i*26)+k] = new Synapse(0.5)
        }
        for k=0, 8 {
            inh[(i*9)+k] = new Synapse(0.5)
            inh[(i*9)+k].Erev = -60
        }
        psection()        
    }
    connect dend[i](0), soma(1) 
}  
  
objref ns1, ns2, ns3, nc1, nc2, nc3
if (input_freq != 0) {
  
  ns1 = new NetStim(0.5)
  ns1.interval = 1000 / input_freq
  ns1.number = input_freq * 2
  ns2 = new NetStim(0.5)
  ns2.interval = 1000 / input_freq
  ns2.number = input_freq * 2
  ns3 = new NetStim(0.5)
  ns3.interval = 1000 / input_freq
  ns3.number = input_freq * 2
  
  nc1 = new NetCon(ns1, exc[0])
  nc2 = new NetCon(ns2, exc[26])
  nc3 = new NetCon(ns3, exc[52])
  
}

access soma    
psection()

printf("ena: %f", ena)
printf("ek: %f", ek)
printf("eca: %f", eca)
printf("celsius: %f", celsius)
objectvar stim
 
objref rec_v
rec_v = new Vector()
rec_v.record (&soma.v(0.5))

objref rec_t
rec_t = new Vector()
rec_t.record (&t)

dt = 0.025
tstop = 2000
run()

objref output_file
output_file = new File()
output_file.wopen("../../../../output/combined.Golgi.v_dat")
for (i=0; i < rec_v.size(); i=i+1) {
  output_file.printf("%g %g\n", rec_t.x[i], rec_v.x[i])
}
output_file.close()
quit()
