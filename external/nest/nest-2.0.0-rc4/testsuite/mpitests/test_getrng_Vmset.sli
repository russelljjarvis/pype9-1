/*
 *  test_distributed_collect_assert_or_die.sli
 *
 *  This file is part of NEST
 *
 *  Copyright (C) 2009-2010 by
 *  The NEST Initiative
 *
 *  See the file AUTHORS for details.
 *
 *  Permission is granted to compile and modify
 *  this file for non-commercial use.
 *  See the file LICENSE for details.
 *
 */

 /* BeginDocumentation
Name: testsuite::test_getrng_Vmset - test whether Vm can consistently be set to random value

Synopsis: nest_indirect test_getrng_Vmset -> -

Description:

 The script demonstrates two methods of supplying nodes with random
 numbers independent of the number of jobs used to carry out the
 simulation.

 Both methods loop over all nodes in the network and would therefore
 constitute a serial component of run time.  The test was developed in
 the context of ticket $336.

Author:  Plesser, September 2010, Diesmann
SeeAlso: 
*/


/unittest (8831) require
/unittest using



[1 2 4]
{

 % Method 1
 ResetKernel

 0 << /total_num_virtual_procs 4 >> SetStatus

 % obtain global RNG 
 /rng GetGlobalRNG def

 % create four neurons
 /n /iaf_neuron 4 Create def

 % initialize membrane potential randomly from global RNG.
 % The SetStatus is ignored for non-local neurons but still the random number are drawn.
 % Therefore, each neuron receives a well defined random number.
 0 GetLeaves { << /V_m rng drand >> SetStatus } forall

 % get membrane potential of the local nodes
 0 GetLeaves  { /local get } Select  
     { [[/global_id /V_m]] get } Map  Transpose


 % Method 2
 ResetKernel

 0 << /total_num_virtual_procs 4 >> SetStatus

 /n /iaf_neuron 4 Create def

 % initialize membrane potential using the RNG assigned to the virtual process the 
 % neuron lives on. Also with this method each neuron receives a well defined random
 % number.
 0 GetLeaves 
    { dup /local get { dup GetVpRNG /rng Set << /V_m rng drand >> SetStatus } {pop} ifelse } forall

 % get membrane potential of the local nodes
 0 GetLeaves  { /local get } Select  
     { [[/global_id /V_m]] get } Map Transpose


 % combine the results of the two variants and remove duplicate occurence of gids
 join [3] Drop Transpose   % format: [ [gid Vm1 Vm2], ... ]

}
distributed_invariant_collect_assert_or_die



