/*
 *  XDR.sli
 *
 *  This file is part of NEST
 *
 *  Copyright (C) 2004 by
 *  The NEST Initiative
 *
 *  See the file AUTHORS for details.
 *
 *  Permission is granted to compile and modify
 *  this file for non-commercial use.
 *  See the file LICENSE for details.
 *
 */

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% This is the SLI-library defining wrapper-routines
%% for the functions defined in module "synod2/sli/xdr.{h|cpp}".
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/XDR /C++ (1.19) require-component
/XDR /SLI ($Revision: 6635 $) provide-component

/XDR namespace



%----------------------------------------------------------------------------
/* BeginDocumentation

Name: XDR::XDRwrite - write a SLI value to a stream using the XDR data format

Synopsis: ofstream token XDRwrite -> ofstream

Description: Alternatives: Functions XDRwrite_os_i for integer-token,
XDRwrite_os_d for double-token, XDRwrite_os_ia for integer-array
token, XDRwrite_os_da for double-array token (all undocumented) 
-> behaviour and synopsis are the same.

Availability:
  Module XDR. All commands are defined in a "namespace"-dictionary
  called "XDR", which is known in the system dict. To use these
  commands, either call them from the XDR dictionary using "call", or
  open the XDR dictionary first.

Author: Ruediger Kupper

FirstVersion: 3.3.2003

Remarks:
  Currently supported is writing of the following SLI types:
  double
  integer
  flat & homogeneous array of double
  flat & homogeneous array of integer

  Please implement more variants as needed!

  WARNING: Do not mix convential and XDR-style I/O on a single file
  stream, or buffering problems will arise! (With the first
  XDR-access, a standard C-style FILE* is created, which performs
  buffering independently of the C++-mechanism used for conventional I/O).  
  
References: RFC 1832, "man xdr", "more /usr/include/rpc/xdr.h"

SeeAlso: XDR::XDRread_int,  XDR::XDRread_double, call

*/

/XDRwrite [/ostreamtype /doubletype]  /XDRwrite_os_d load def
/XDRwrite [/ostreamtype /integertype] /XDRwrite_os_i load def
/XDRwrite [/ostreamtype /arraytype]
{%stack: ofstream [array]  
  %if the array is empty, we can use any of the routines for writing it, so we use integers
  size 0 eq {XDRwrite_os_ia}
  {  
    %stack: ofstream [nonemptyarray]
    %look at the type of the first element:  
    dup 0 get type
    %stack: ofstream [nonemptyarray] /type
    mark  
    1 pick /integertype eq    {pop XDRwrite_os_ia} case
    1 pick /doubletype  eq    {pop XDRwrite_os_da} case
                              {pop /XDRwrite /UnsupportedArrayType raiseerror}
    switchdefault
  } ifelse    
} bind def



%----------------------------------------------------------------------------
/* BeginDocumentation

Name: XDR::XDRread_double - read a SLI double or double array from a stream using the XDR data format

Synopsis:
  ifstream   XDRread_double -> ifstream d
  ifstream n XDRread_double -> ifstream [d1 d2 ... dn]

Description: Alternatives: Functions XDRread_double_is for ifstream
(synopsis 1), XDRread_double_is_i for ifstream and integer (synopsis
2) (both undocumented) -> behaviour and synopsis are the same.

Availability:
  Module XDR. All commands are defined in a "namespace"-dictionary
  called "XDR", which is known in the system dict. To use these
  commands, either call them from the XDR dictionary using "call", or
  open the XDR dictionary first.

Author: Ruediger Kupper

FirstVersion: 2.7.2003

Remarks:
  Currently supported is reading of the following SLI types:
  double
  integer
  flat & homogeneous array of double
  flat & homogeneous array of integer

  Please implement more variants as needed!

  WARNING: Do not mix convential and XDR-style I/O on a single file
  stream, or buffering problems will arise! (With the first
  XDR-access, a standard C-style FILE* is created, which performs
  buffering independently of the C++-mechanism used for conventional I/O).  
  
References: RFC 1832, "man xdr", "more /usr/include/rpc/xdr.h"

SeeAlso:  XDR::XDRread_int, XDR::XDRwrite, call

*/

/XDRread_double [/istreamtype]  /XDRread_double_is load def
/XDRread_double [/istreamtype /integertype]  /XDRread_double_is_i load def



%----------------------------------------------------------------------------
/* BeginDocumentation

Name: XDR::XDRread_int - read a SLI integer or integer array from a stream using the XDR data format

Synopsis: 
  ifstream   XDRread_int -> ifstream i
  ifstream n XDRread_int -> ifstream [i1 i2 ... in]

Description: Alternatives: Functions XDRread_int_is for ifstream
(synopsis 1), XDRread_int_is_i for ifstream and integer (synopsis
2) (both undocumented) -> behaviour and synopsis are the same.

Availability:
  Module XDR. All commands are defined in a "namespace"-dictionary
  called "XDR", which is known in the system dict. To use these
  commands, either call them from the XDR dictionary using "call", or
  open the XDR dictionary first.

Author: Ruediger Kupper

FirstVersion: 2.7.2003

Remarks:
  Currently supported is reading of the following SLI types:
  double
  integer
  flat & homogeneous array of double
  flat & homogeneous array of integer

  Please implement more variants as needed!

  WARNING: Do not mix convential and XDR-style I/O on a single file
  stream, or buffering problems will arise! (With the first
  XDR-access, a standard C-style FILE* is created, which performs
  buffering independently of the C++-mechanism used for conventional I/O).  
  
References: RFC 1832, "man xdr", "more /usr/include/rpc/xdr.h"

SeeAlso: XDR::XDRread_double, XDR::XDRwrite, call

*/

/XDRread_int [/istreamtype]  /XDRread_int_is load def
/XDRread_int [/istreamtype /integertype]  /XDRread_int_is_i load def






end %% use XDR "namespace"


%% NOTE: There must be a carriage return after the last line, i.e., here:
