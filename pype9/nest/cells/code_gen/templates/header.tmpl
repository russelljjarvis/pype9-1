/* This file was generated by PyPe9 version {{version}} on {{timestamp}} */

#ifndef {{component_name | upper}}_H
#define {{component_name | upper}}_H

#include "nest.h"
#include "event.h"
#include "archiving_node.h"
#include "ring_buffer.h"
#include "connection.h"
#include "universal_data_logger.h"
#include "recordables_map.h"
#include "dictutils.h"
#include "exceptions.h"

{% include "solver_includes.tmpl" %}

{% include "ss_solver_includes.tmpl" %}

{% include "item_macro.tmpl" %}

namespace nineml {
    

{% include "solver_preludes.tmpl" %}
{% include "ss_solver_preludes.tmpl" %}

    class {{component_name}};

    /**
     * Create a typedef for the function that represents the system of ODEs
     */ 
    typedef int (*dynamics_function_type){% include "dynamics_signature.tmpl" %};

    /**
     * Declaration of dynamics and residual signatures
     */
{% for regime in component_class.regimes %}
    extern "C" int {{component_name}}_{{regime.name}}_dynamics{% include "dynamics_signature.tmpl" %};
    {% include "jacobian_signature.tmpl" %}
    {% include "residual_signature.tmpl" %}
    {% include "event_signature.tmpl" %}
    {% include "ss_signature.tmpl" %}
{% endfor %}

    class {{component_name}} : public nest::Archiving_Node {

      public:
	    class ExceededMaximumSimultaneousTransitions : public nest::KernelException {
	    
	      public:
	        ExceededMaximumSimultaneousTransitions(const std::string& model, int num_transitions, double t)
	          : KernelException("ExceededMaximumSimultaneousTransitions"), model(model), num_transitions(num_transitions), t(t) {}
	        ~ExceededMaximumSimultaneousTransitions() throw () {}
	        std::string message();
	      protected:
	         const std::string& model;
	         int num_transitions;
	         double t;
	    };


        static const int MAX_SIMULTANEOUS_TRANSITIONS = {{max_simultaneous_transitions}};

        class Regime_;
        class Transition_;
        class OnEvent_;
        class OnCondition_;
{% for regime in component_class.regimes %}
    {% for on_event in regime.on_events %}
        class {{regime.name}}On{{on_event.src_port_name}}Event;
    {% endfor %}
    {% for on_condition in regime.on_conditions %}
        class {{regime.name}}OnCondition{{regime.index_of(on_condition)}};
    {% endfor %}
{% endfor %}      

        ~{{component_name}}();
	    {{component_name}}(const {{component_name}} &);
	    {{component_name}}();

	    /**
	     * Import sets of overloaded virtual functions.
	     * This is necessary to ensure proper overload and overriding resolution.
	     * @see http://www.gotw.ca/gotw/005.htm.
	     */
	    using nest::Node::handle;
	    using nest::Node::handles_test_event;

	    nest::port send_test_event(nest::Node&, nest::port, nest::synindex, bool);

	    void handle(nest::SpikeEvent &);
	    void handle(nest::CurrentEvent &);
	    void handle(nest::DataLoggingRequest &);

	    nest::port handles_test_event(nest::SpikeEvent &, nest::port);
	    nest::port handles_test_event(nest::CurrentEvent &, nest::port);
	    nest::port handles_test_event(nest::DataLoggingRequest &, nest::port);

	    void get_status(DictionaryDatum &) const;
	    void set_status(const DictionaryDatum &);

	    void init_node_(const nest::Node& proto);
	    void init_state_(const nest::Node& proto);
	    void init_buffers_();
	    void calibrate();
	    Regime_* get_regime(const std::string& regime_name);
	    
	    void refresh_events(const nest::long_t& lag);
	    
        /* Inline random distribution methods */
        double random_uniform_(double low, double high);
        double random_normal_(double mu, double sigma);
        double random_exponential_(double lambda); 

	    void update(nest::Time const &, const nest::long_t, const nest::long_t);

    // Set dynamics methods (the ones that actually model the dynamics) as friends
{% for regime in component_class.regimes %}
	    friend int {{component_name}}_{{regime.name}}_dynamics{% include "dynamics_signature.tmpl" %};
{% endfor %}
        {% include "residual_friend.tmpl" %}
        {% include "event_friend.tmpl" %}
        {% include "ss_friend.tmpl" %}


{% if component_class.event_receive_ports %}
	    /* Event port ids
	     * @note Start with 1 so we can forbid port 0 to avoid accidental
	     *     creation of connections with no receptor type set.
	     */
	    static const nest::port MIN_EVENT_PORT_ = 1;
	    enum EventPorts {
    {% for port in component_class.event_receive_ports %}
        {% if loop.first %}
	        {{port.name}}_EVENT_PORT = MIN_EVENT_PORT_,
        {% else %}
	        {{port.name}}_EVENT_PORT,
        {% endif %}
    {% endfor %}
	        SUP_EVENT_PORT_
	    };

	    // On event ids
	    enum OnEvents {
    {% for regime in component_class.regimes %}
        {% for oe in regime.on_events %}
	        {{regime.name}}_{{oe.src_port_name}}_ON_EVENT,
        {% endfor %}
    {% endfor %}
	        SUP_ON_EVENT_
	    };

{% endif %}
{% if component_class.analog_receive_ports %}
	    //Analog port ids
	    static const nest::port MIN_ANALOG_PORT_ = 1;
	    enum AnalogPorts {
    {% for port in chain(component_class.analog_receive_ports, component_class.analog_reduce_ports) %}
        {% if loop.first %}
            {{port.name}}_ANALOG_PORT = MIN_ANALOG_PORT_,
        {% else %}
            {{port.name}}_ANALOG_PORT,
        {% endif %}
    {% endfor %}
            SUP_ANALOG_PORT_
        };

{% endif %}
        // Synaptic event function definitions
{% for regime in component_class.regimes %}
    {% for oe in regime.on_events %}
        inline void {{oe.src_port_name}}_event_in_{{regime.name}}(nest::long_t lag);
    {% endfor %}
{% endfor %}

	    // The next two classes need to be friends to access the State_ class/member
	    friend class nest::RecordablesMap<{{component_name}}>;
	    friend class nest::UniversalDataLogger<{{component_name}}>;

        struct Parameters_ {
{% for param in component_class.parameters %}
            double {{param.name}};
{% endfor %}
	        Parameters_();
	        void get(DictionaryDatum&) const;
	        void set(const DictionaryDatum&);
	    }; // end struct Parameters_

	    struct State_ {

            enum StateVecElems {
{% for sv in component_class.state_variables %}
    {% if loop.first %}
                {{sv.name}}_INDEX = 0,
    {% else %}
                {{sv.name}}_INDEX,
    {% endif %}
{% endfor %}
                STATE_VEC_SIZE_
            };

            double y_[STATE_VEC_SIZE_];

	        State_(const Parameters_& p);
	        State_(const State_& s);
	        State_& operator=(const State_& s);
	        void get(DictionaryDatum&) const;
	        void set(const DictionaryDatum&, const Parameters_&);
	    }; // end struct State_

        struct Variables_ {
		    librandom::RngPtr rng_;           // random number generator of thread
        };

        struct Buffers_ {
	        Buffers_({{component_name}}&);
	        Buffers_(const Buffers_&, {{component_name}}&);
	        nest::UniversalDataLogger<{{component_name}}> logger_;

	        // Timesteps
	        double_t step_;       //!< step size in ms

	        // Event receive port buffers
{% for port in component_class.event_receive_ports %}
            nest::ListRingBuffer {{port.name}}_event_port;
            std::list<double_t>* {{port.name}}_events;  // Points to the events in the current timestep.
{% endfor %}

            // Event send port count
{% for port in component_class.event_send_ports %}
            int num_{{port.name}}_events;
{% endfor %}

            // Analog receive port buffers
{% for port in chain(component_class.analog_receive_ports, component_class.analog_reduce_ports) %}
            nest::RingBuffer {{port.name}}_analog_port;
{% endfor %}

            // Variables to hold the last value of the analog receive port buffers
{% for port in chain(component_class.analog_receive_ports, component_class.analog_reduce_ports) %}
            double_t {{port.name}}_value;
{% endfor %}

            Regime_* current_regime;

	    }; // end struct Buffers_
	    
	    class Regime_ {
	     
	      public:
	        Regime_({{component_name}}* cell, dynamics_function_type dynamics_function=NULL)
	          : cell(cell), dynamics_function(dynamics_function) {}
	        virtual ~Regime_();
	        Transition_* transition(nest::Time const & origin, const nest::long_t& lag);
	        void set_triggers(double t);
	        virtual void init_solver() = 0;
	        virtual void step_ode() = 0;
	        
	       
	      protected:
	        {{component_name}}* cell;
	        dynamics_function_type dynamics_function;
            std::vector<OnCondition_*> on_conditions;
            std::vector<OnEvent_*> on_events;
            std::vector<OnCondition_*> active_on_conditions;
           
          friend class {{component_name}};
          friend class Transition_;
          friend class OnEvent_;
          friend class OnCondition_;
{% for regime in component_class.regimes %}
    {% for on_event in regime.on_events %}
          friend class {{regime.name}}On{{on_event.src_port_name}}Event;
    {% endfor %}
    {% for on_condition in regime.on_conditions %}
          friend class {{regime.name}}OnCondition{{regime.index_of(on_condition)}};
    {% endfor %}
{% endfor %}         
	    
	    };
	    
        /*
         * Create a specific class for each regime in order to override the 
         * default constructor and initialise its transitions
         */
{% for regime in component_class.regimes %}
        class {{regime.name}}Regime_ : public Regime_ {
            
          public:
          
            // Regime-specifc indices for states that are updated by its ODE
            // system, so the regime-specifi state vector can be trunctated to
            // exclude states that aren't updated.
            enum ODEStateElem {
    {% for td in regime.time_derivatives %}
        {% if loop.first %}
             {{td.dependent_variable}}_INDEX = 0,
        {% else %}
             {{td.dependent_variable}}_INDEX,
        {% endif %}
    {% endfor %}
                ODE_STATE_VEC_SIZE_
            };
          
            {{regime.name}}Regime_({{component_name}}* cell);
            virtual ~{{regime.name}}Regime_();
            virtual void init_solver();
            virtual void step_ode();
            
          protected:

            // Array containg the values for the states for the set of ODEs
            // FIXME: This should be a generic vector macro to support CVODE, etc...
            double ode_y_[ODE_STATE_VEC_SIZE_];
    {% if regime.num_time_derivatives %}
            // Structures required by the solver
{% include "solver_structs.tmpl" %}
    {% endif %}
    
          {% include "jacobian_friend.tmpl" %}

        };
{% endfor %}	    
	    
	    /**
	     * Set up an abstract base class to define a common interface for all
	     * transitions (both OnEvent and OnCondition).
	     */
	    class Transition_ {

	      public:
	        Transition_(Regime_* regime, const std::string& target_regime_name)
	          : regime(regime), target_regime(NULL), target_regime_name(target_regime_name) {}
	        virtual ~Transition_() {}
            void set_target_regime(std::map<std::string, Regime_*>& regimes);
            Regime_* get_target_regime();	        
	        virtual double time_occurred(nest::Time const & origin, const nest::long_t& lag) = 0;
	        virtual bool body(double t) = 0;
	        
            /* Inline random distribution methods */
	        double random_uniform_(double low, double high);
	        double random_normal_(double mu, double sigma);
	        double random_exponential_(double lambda);   

	      protected:
	        Regime_* regime;
	        Regime_* target_regime;
	        std::string target_regime_name;
	    };
	    
	    
	    /**
	     * The base OnEvent class from which all OnEvent classes are derived
	     */
	    class OnEvent_ : public Transition_ {
	    
	      public:
	        OnEvent_(Regime_* regime, const std::string& target_regime_name) : Transition_(regime, target_regime_name) {}
            virtual ~OnEvent_() {}
            virtual bool received(nest::Time const & origin, const nest::long_t& lag) = 0;
	    
	    };

        /**
         * The base OnCondition class from which all OnCondition classes are derived
         */
	    class OnCondition_ : public Transition_ {
	      public:
	        OnCondition_(Regime_* regime, const std::string& target_regime_name) : Transition_(regime, target_regime_name) {}
	        virtual ~OnCondition_() {}
            virtual bool condition(double t) = 0;
	    };
	    
	    /*
	     * Create a specific class for each OnEvent and OnCondition that will
	     * specify its trigger condition, state assignments and output events
	     */
{% for regime in component_class.regimes %}
    {% for on_event in regime.on_events %}
        {% set ClassName = '{}On{}Event'.format(regime.name, on_event.src_port_name) %}
        class {{ClassName}} : public OnEvent_ {

          public:
            {{ClassName}}(Regime_* regime, const std::string& target_regime_name) : OnEvent_(regime, target_regime_name) {}
            virtual ~{{ClassName}}() {}
            virtual bool received(nest::Time const & origin, const nest::long_t& lag);                        
            virtual double time_occurred(nest::Time const & origin, const nest::long_t& lag);
            virtual bool body(double t);
     
        };

    {% endfor %}
    {% for on_condition in regime.on_conditions %}
        {% set ClassName = '{}OnCondition{}'.format(regime.name, regime.index_of(on_condition)) %}
        class {{ClassName}} : public OnCondition_ {

          public:
            {{ClassName}}(Regime_* regime, const std::string& target_regime_name) : OnCondition_(regime, target_regime_name) {}
            virtual ~{{ClassName}}() {}
            virtual bool condition(double t);
            virtual double time_occurred(nest::Time const & origin, const nest::long_t& lag);
            virtual bool body(double t);
     
        };

    {% endfor %}
{% endfor %}

		template <State_::StateVecElems elem>
		double_t get_y_elem_() const { return S_.y_[elem]; }

		Parameters_ P_;
		State_      S_;
		Variables_  V_;
		Buffers_    B_;

	    //! Mapping of recordables names to access functions	
		static nest::RecordablesMap<{{component_name}}> recordablesMap_;
		
	  protected:
	    void construct_regimes();
        std::map<std::string, Regime_*> regimes;		
    
	}; // end class {{component_name}}
	
	inline {{component_name}}::Regime_* {{component_name}}::get_regime(const std::string& regime_name) {
	   return regimes[regime_name];
	}

    inline void {{component_name}}::Transition_::set_target_regime(std::map<std::string, {{component_name}}::Regime_*>& regimes) {
        this->target_regime = regimes[this->target_regime_name];   
    }

    inline {{component_name}}::Regime_* {{component_name}}::Transition_::get_target_regime() {
        return this->target_regime;   
    }

    inline nest::port {{component_name}}::send_test_event(nest::Node& target, nest::port receptor_type, nest::synindex, bool) {
		nest::SpikeEvent e;
		e.set_sender(*this);
		return target.handles_test_event(e, receptor_type);
    }

    inline nest::port {{component_name}}::handles_test_event(nest::SpikeEvent&, nest::port receptor_type) {
	    if (receptor_type < 0 || receptor_type >= SUP_EVENT_PORT_)
            throw nest::UnknownReceptorType(receptor_type, this->get_name());
        else if (receptor_type < MIN_EVENT_PORT_)
            throw nest::IncompatibleReceptorType(receptor_type, this->get_name(), "SpikeEvent");
		return receptor_type;
    }

    inline nest::port {{component_name}}::handles_test_event(nest::CurrentEvent&, nest::port receptor_type) {
		if (receptor_type < 0 || receptor_type >= SUP_ANALOG_PORT_)
		    throw nest::UnknownReceptorType(receptor_type, this->get_name());
		else if (receptor_type < MIN_ANALOG_PORT_)
		    throw nest::IncompatibleReceptorType(receptor_type, this->get_name(), "SpikeEvent");
	    return receptor_type;
	}

	inline nest::port {{component_name}}::handles_test_event(nest::DataLoggingRequest& dlr, nest::port receptor_type) {
	    if (receptor_type != 0)
            throw nest::UnknownReceptorType(receptor_type, this->get_name());
		return B_.logger_.connect_logging_device( dlr, recordablesMap_ );
    }

    inline void {{component_name}}::get_status(DictionaryDatum &d) const {
		P_.get(d);
		S_.get(d);
		nest::Archiving_Node::get_status(d);
		(*d)[nest::names::recordables] = recordablesMap_.get_list();
		def<double_t>(d, nest::names::t_spike, get_spiketime_ms());
		DictionaryDatum receptor_dict_ = new Dictionary();
		// Synaptic event dictionary
{% for port in component_class.event_receive_ports %}
        (*receptor_dict_)[Name("{{port.name}}")]  = {{port.name}}_EVENT_PORT;
{% endfor %}
{% for port in chain(component_class.analog_receive_ports, component_class.analog_reduce_ports) %}
        (*receptor_dict_)[Name("{{port.name}}")]  = {{port.name}}_ANALOG_PORT;
{% endfor %}
        (*d)[nest::names::receptor_types] = receptor_dict_;
    }

    inline void {{component_name}}::set_status(const DictionaryDatum &d) {
	    Parameters_ ptmp = P_;  // temporary copy in case of errors
	    ptmp.set(d);             // throws if BadProperty
	    State_    stmp = S_;  // temporary copy in case of errors
	    stmp.set(d, ptmp);         // throws if BadProperty
	    // We now know that (ptmp, stmp) are consistent. We do not
	    // write them back to (P_, S_) before we are also sure that
		// the properties to be set in the parent class are internally
		// consistent.
		nest::Archiving_Node::set_status(d);
		// if we get here, temporaries contain consistent set of properties
		P_ = ptmp;
		S_ = stmp;	
	    calibrate();
    }
    
    /* Inline random distributions (for deprecated format random.*), copied
       from the corresponding NEST random deviate implementations in librandom
       but stripped from RandomDeviate boiler plate */
    
    inline double {{component_name}}::random_uniform_(double low, double high) {
        return low + (high - low) * V_.rng_->drand();
    }

    inline double {{component_name}}::random_normal_(double mu, double sigma) {
        // Box-Muller algorithm, see Knuth TAOCP, vol 2, 3rd ed, p 122
        // we waste one number
        double V1;
        double V2;
        double S;

        do {
            V1 = 2 * V_.rng_->drand() - 1;
            V2 = 2 * V_.rng_->drand() - 1;
            S = V1 * V1 + V2 * V2;
        } while ( S >= 1 );

        if ( S != 0 )
            S = V1 * std::sqrt( -2 * std::log( S ) / S );
        return mu + sigma * S;
    }
    
    inline double {{component_name}}::random_exponential_(double lambda) {
        return -std::log(V_.rng_->drandpos()) / lambda;
    }
    
    
    inline double {{component_name}}::Transition_::random_uniform_(double low, double high) {
        return low + (high - low) * this->regime->cell->V_.rng_->drand();
    }

    inline double {{component_name}}::Transition_::random_normal_(double mu, double sigma) {
        // Box-Muller algorithm, see Knuth TAOCP, vol 2, 3rd ed, p 122
        // we waste one number
        double V1;
        double V2;
        double S;

        do {
            V1 = 2 * this->regime->cell->V_.rng_->drand() - 1;
            V2 = 2 * this->regime->cell->V_.rng_->drand() - 1;
            S = V1 * V1 + V2 * V2;
        } while ( S >= 1 );

        if ( S != 0 )
            S = V1 * std::sqrt( -2 * std::log( S ) / S );
        return mu + sigma * S;
    }
    
    inline double {{component_name}}::Transition_::random_exponential_(double lambda) {
        return -std::log(this->regime->cell->V_.rng_->drandpos()) / lambda;
    }
    

} // end namespace nineml

#endif // {{component_name | upper}}_H
