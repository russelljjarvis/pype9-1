
    IntegrationStep_ = cell->B_.step_;

    static const gsl_odeiv2_step_type* T1 = gsl_odeiv2_step_rk2;
    //FIXME: Could be reduced to include only the states which have a time
    //       derivative
    N = {{regime.num_time_derivatives}};

    if ( s_ == 0 ) {
        s_ = gsl_odeiv2_step_alloc (T1, N);
    } else
        gsl_odeiv2_step_reset(s_);

    if ( c_ == 0 )
        c_ = gsl_odeiv2_control_standard_new ({{abs_tolerance}}, {{rel_tolerance}}, 1.0, 0.0);
    else
        gsl_odeiv2_control_init(c_, {{abs_tolerance}}, {{rel_tolerance}}, 1.0, 0.0);

    if ( e_ == 0 ) {
        e_ = gsl_odeiv2_evolve_alloc(N);
        // Probably not necessary to set these working variables as it is not
        // done in GSL examples but squashes the valgrind error
        // "Conditional jump or move depends on uninitialised value(s)"
        memset(e_->dydt_in, 0.0, (N * sizeof(double)));
        memset(e_->dydt_out, 0.0, (N * sizeof(double)));
    } else
        gsl_odeiv2_evolve_reset(e_);

    sys_.function  = {{component_name}}_{{regime.name}}_dynamics;
    sys_.jacobian  = {{component_name}}_{{regime.name}}_jacobian;
    sys_.dimension = N;
    sys_.params    = reinterpret_cast<void*>(this->cell);

    // Initialise 
    if (u == 0) {
        u = (double *)malloc(sizeof(double) * N);
        assert (u);
    }    
    memset(u, 0, sizeof(double) * N);
    
    // Initialise Jacobian matrix approximation vector
    if (jac == 0) {
        jac = (double *)malloc(sizeof(double) * N);
        assert (jac);
        
    }
    memset(jac, 0, sizeof(double) * N);
