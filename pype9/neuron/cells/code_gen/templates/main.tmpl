{% macro elseif(first) %}{% if first %}if{% else %}} else if{% endif %}{% endmacro %}
{% macro endif(last) %}{% if last %}}{% endif %}{% endmacro %}
VERBATIM
extern double nineml_gsl_normal(double, double);
extern double nineml_gsl_uniform(double, double);
extern double nineml_gsl_binomial(double, int);
extern double nineml_gsl_exponential(double);
extern double nineml_gsl_poisson(double);
ENDVERBATIM

TITLE Spiking node generated from 9ML using PyPe9 version {{version}} at '{{timestamp}}'

NEURON {
{% if component_class.annotations[PYPE9_NS][MECH_TYPE] == SUB_COMPONENT_MECH %}
    SUFFIX {{component_name}}
    {% for species, ports in component_class.annotations[PYPE9_NS][ION_SPECIES].iteritems() %}
        {% if species == NONSPECIFIC_CURRENT %}
    NONSPECIFIC_CURRENT {% for port in component_class.analog_send_ports if port.dimension == units.currentDensity %}{{port.name}}{% if not loop.last %}, {% endif %}{% endfor %}
        {% else %}
    USEION {{species}} 
            {%- for p in ports if p.mode == 'recv' %}
                {%- if loop.first %} READ{% endif %} {{p.name}}{% if not loop.last %},{% endif %}
            {%- endfor %}
            {%- for p in ports if p.mode == 'send' %}
                {%- if loop.first %} WRITE{% endif %} {{p.name}}{% if not loop.last %},{% endif %}
            {%- endfor %}
        {% endif %}

    {% endfor %}
{% elif component_class.annotations[PYPE9_NS][MECH_TYPE] == FULL_CELL_MECH  %}
    POINT_PROCESS {{component_name}}
    NONSPECIFIC_CURRENT {% for port in component_class.analog_send_ports if port.dimension == units.current %}{% if not loop.first %}, {% endif %}{{port.name}}{% endfor %}
{% elif component_class.annotations[PYPE9_NS][MECH_TYPE] == ARTIFICIAL_CELL_MECH  %}
    ARTIFICIAL_CELL {{component_name}}
{% endif %}

    : T
    RANGE regime_

    :StateVariables:
{% for sv in component_class.state_variables %}
    RANGE {{sv.name}}
{% endfor %}

    :Parameters
{% for p in component_class.parameters %}
    RANGE {{p.name}}
{% endfor %}

    : Analog receive ports
{% for p in component_class.analog_receive_ports %}
    RANGE {{p.name}}
{% endfor %}

    :Aliases
{% for alias in component_class.aliases %}
    RANGE {{alias.name}}
{% endfor %}

    :Connection Parameters
{% for conn_param_set in component_class.connection_parameter_sets %}
    {% for parameter in conn_param_set.parameters %}
    RANGE {{parameter.name}}
    {% endfor %}
{% endfor %}

}

UNITS {
    : Define symbols for base units
    (mV) = (millivolt)
    (nA) = (nanoamp)
    (nF) = (nanofarad)
    (uF) = (microfarad)
    (S)  = (siemens)
    (uS) = (microsiemens)
    (mM) = (milli/liter)
    (um) = (micrometer)
}

CONSTANT {
    : IDs for regimes, events and conditions 

    : Transition flags
    INIT = -1    
    ON_EVENT = 0

    : Regime ids
{% for regime in component_class.regimes %}
    {{regime.name | upper}} = {{component_class.index_of(regime)}}
{% endfor %}

    : Event port ids
{% for port in component_class.event_receive_ports %}
    {{port.name | upper}} = {{component_class.index_of(port)}}
{% endfor %}

}

INITIAL {
    : Initialise State Variables:
{% for sv in component_class.state_variables %}
    {{sv.name}} = 0
{% endfor %}

    : Initialise Regime:
    {# This should come from the initial state, when we sort out that format #}
{% if initial_regime %}
    regime_ = {{initial_regime | upper}}
{% else %}
    regime_ = {{next(component_class.regimes).name | upper}}
{% endif %}

{% if component_class.annotations[PYPE9_NS][MECH_TYPE] != SUB_COMPONENT_MECH %}
    : Initialise the NET_RECEIVE block by sending appropriate flag to itself
    net_send(0, INIT)
{% endif %}
}

PARAMETER {
    : True parameters
{% for param, units in unit_handler.assign_units_to_variables(component_class.parameters) %}
    {{param.name}} = 0 ({{units}})
{% endfor %}

    : Constants
{% for const, value, units in unit_handler.assign_units_to_constants(component_class.constants) %}
    {{const.name}} = {{value}} ({{units}})
{% endfor %}

    : Units for connection properties
{% for connection_parameter_set in component_class.connection_parameter_sets %}
    {% for parameter in connection_parameter_set.parameters %} 
    {{parameter.name | upper}}_UNITS_ = 1 ({{unit_handler.dimension_to_unit_str(parameter.dimension)}})
    {% endfor %}
{% endfor %} 

    : Unit correction for 't' used in printf in order to get modlunit to work.
    PER_MS = 1 (/ms)
}


ASSIGNED {
    : Internal flags
    regime_
    found_transition_
    
    : Analog receive ports
{% for port, units in unit_handler.assign_units_to_variables(chain(component_class.analog_receive_ports, component_class.analog_reduce_ports)) %}
    {{port.name}} ({{units}}) 
{% endfor %}

    : Aliases
{% for alias, units in unit_handler.assign_units_to_aliases(component_class.aliases) %}
    {{alias.name}} ({{units}})
{% endfor %}

    : State variables without explicit derivatives
{% for sv, units in unit_handler.assign_units_to_variables(component_class.state_variables) if len(list(component_class.all_time_derivatives(state_variable=sv))) == 0 %}
    {{sv.name}} ({{units}})
{% endfor %}

    :Connection Parameters
{% for conn_param_set in component_class.connection_parameter_sets %}
    {% for parameter, units in unit_handler.assign_units_to_variables(conn_param_set.parameters) %}
    {{parameter.name}} ({{units}})
    {% endfor %}
{% endfor %}
}

{% if component_class.annotations[PYPE9_NS][MECH_TYPE] != ARTIFICIAL_CELL_MECH  %}
STATE {
    {% for sv, units in unit_handler.assign_units_to_variables(component_class.state_variables) if sv.name != 'v' and len(list(component_class.all_time_derivatives(state_variable=sv))) %}
    {{sv.name}} ({{units}})
    {% endfor %}
}


BREAKPOINT {
    {% if component_class.annotations[PYPE9_NS][HAS_TIME_DERIVS] %}
    SOLVE states METHOD {{ode_solver}}
    {% endif %}
    {% for alias, scaled_expr, _ in unit_handler.scale_aliases(component_class.required_for(list(component_class.all_time_derivatives()) + list(component_class.analog_send_ports)).expressions) %}
        {% if len(list(component_class.overridden_in_regimes(alias))) %}
            {% for regime in component_class.overridden_in_regimes(alias) %}
                {% set scaled_regime_expr, _ = unit_handler.scale_alias(regime.alias(alias.lhs)) %}
    {{elseif(loop.first)}} (regime_ == {{regime.name | upper}}) {
        {{code_gen.assign_str(alias.lhs, scaled_regime_expr.rhs) | indent(8)}}
            {% endfor %}
    } else {
        {{code_gen.assign_str(alias.lhs, scaled_expr.rhs) | indent(8)}}
    }
        {% else %}
    {{code_gen.assign_str(alias.lhs, scaled_expr.rhs) | indent(4)}}
        {% endif %}
    {% endfor %}
}


    {% if component_class.annotations[PYPE9_NS][HAS_TIME_DERIVS] %}
DERIVATIVE states {
        {% for sv in component_class.state_variables if sv.name not in component_class.annotations[PYPE9_NS][NO_TIME_DERIVS] %}
    {{sv.name}}' = deriv_{{sv.name}}({{component_class.required_for(component_class.all_time_derivatives(sv)).state_variable_names | join(', ')}})
        {% endfor %}
}
    {% endif %}

    {% for sv in component_class.state_variables if sv.name not in component_class.annotations[PYPE9_NS][NO_TIME_DERIVS] %}
FUNCTION deriv_{{sv.name}}(
        {%- for sv, units in unit_handler.assign_units_to_variables(component_class.required_for(component_class.all_time_derivatives(sv)).state_variables) -%}
        {{sv.name}} ({{units}}){%- if loop.last %}{% else %}, {% endif -%}
        {%- endfor %}
    ) ({{unit_handler.assign_units_to_variable(sv, derivative_of=True)}}) {
        {% for regime in component_class.regimes  if sv.name in regime._time_derivatives %}
    {{elseif(loop.first)}} (regime_ == {{regime.name | upper}}) {
            {% set scaled_expr, units = unit_handler.scale_time_derivative(regime.time_derivative(sv.name)) %}
        {{code_gen.assign_str('deriv_' + sv.name, scaled_expr.rhs)}}
    {{endif(loop.last)}}
        {% endfor %}
}
    {% endfor %}
{% endif %}

{% if component_class.annotations[PYPE9_NS][MECH_TYPE] != SUB_COMPONENT_MECH %}
NET_RECEIVE(connection_weight_, channel) {
    INITIAL {
      : stop channel being set to 0 by default
    }
    found_transition_ = -1
    if (flag == INIT) {
    {% if component_class.annotations[PYPE9_NS][MECH_TYPE] == ARTIFICIAL_CELL_MECH %}
        : Use net_send for transitions triggers that depend on t
        {% for regime in component_class.regimes %}        
            {% for oc in regime.on_conditions %}
                {% if oc.trigger.crossing_time_expr %}
        net_send({{unit_handler.scale_alias(oc.trigger.crossing_time_expr)[0].rhs}}, {{component_class.index_of(oc.trigger.rhs, key='TriggerRHS') + 1}})
                {% endif %}
            {% endfor %}
        {% endfor %}
    {% else %}
        : Set up required watch statements
        {% for regime in component_class.regimes %}
            {% for oc in regime.on_conditions %}
        WATCH ({{oc.trigger.rhs_cstr}}) {{component_class.index_of(oc.trigger.rhs, key='TriggerRHS') + 1}}  : Watch trigger of on-condition and send appropriate flag
            {% endfor %}
        {% endfor %}
    {% endif %}
    {% for regime in component_class.regimes %}
    } else if (regime_ == {{regime.name | upper}}) {
        {% for trans in regime.transitions %}
            {% if hasattr(trans, 'trigger') %}
        if (flag == {{component_class.index_of(trans.trigger.rhs, key='TriggerRHS') + 1}}) {  : Condition '{{trans.trigger.rhs_str}}'
            {% else %}
        if (flag == ON_EVENT && channel == {{trans.src_port_name | upper}}) {
                {% if trans.src_port_name in component_class.connection_parameter_set_names %}
                    {% set connection_parameter =  component_class.connection_parameter_set(trans.src_port_name).parameters[0]%}
                    {# FIXME: Need to check that there is only one connection parameter per input channel #}
            : Assign event weight to paired analog receive port
            {{connection_parameter.name}} = connection_weight_ * {{connection_parameter.name | upper}}_UNITS_
                {% endif %}
            {% endif %}                  
            : Required aliases
            {% for elem, scaled_expr, _ in unit_handler.scale_aliases(component_class.required_for(trans.state_assignments).expressions) %}
            {{code_gen.assign_str(elem.lhs, scaled_expr.rhs)}}
            {% endfor %}

            : State assignments
            {% for sa, scaled_expr, _ in unit_handler.scale_aliases(trans.state_assignments) %}
            {{code_gen.assign_str(sa.lhs, scaled_expr.rhs)}}
            {% endfor %}

            : Output events
            {% for node in trans.output_events %}
            net_event(t)  : FIXME: Need to specify which output port this is
            {% endfor %}
        
            : Regime transition
            if (found_transition_ == -1) {
                found_transition_ = flag
            } else {
                printf("WARNING!! Found multiple transitions %f and %f at time %f", found_transition_, flag, t * PER_MS)
            }
            regime_ = {{trans.target_regime.name | upper}}

            {% if component_class.annotations[PYPE9_NS][MECH_TYPE] == ARTIFICIAL_CELL_MECH %}
            : Use net_send for transitions triggers that depend on t
                {% for oc in trans.target_regime.on_conditions %}
                    {% if oc.trigger.crossing_time_expr %}
            net_send({{unit_handler.scale_alias(oc.trigger.crossing_time_expr)[0].rhs}}, {{component_class.index_of(oc.trigger.rhs, key='TriggerRHS') + 1}})
                    {% endif %}
                {% endfor %}
            {% endif %}
        }
        {% endfor %}
    {% endfor %}
    } else {
        printf("ERROR! Unrecognised regime %f", regime_)
    }
}
{% endif %}

FUNCTION random_normal_(m,s) {
VERBATIM
    _lrandom_normal_ = nineml_gsl_normal(_lm,_ls);
ENDVERBATIM
}

FUNCTION random_uniform_(m,s) {
VERBATIM
    _lrandom_uniform_ = nineml_gsl_uniform(_lm,_ls);
ENDVERBATIM
}

FUNCTION random_binomial_(m,s) {
VERBATIM
    _lrandom_binomial_ = nineml_gsl_binomial(_lm,_ls);
ENDVERBATIM
}

FUNCTION random_poisson_(m) {
VERBATIM
    _lrandom_poisson_ = nineml_gsl_poisson(_lm);
ENDVERBATIM
}

FUNCTION random_exponential_(m) {
VERBATIM
    _lrandom_exponential_ = nineml_gsl_exponential(_lm);
ENDVERBATIM
} 
